;**************************************************************************
; PRACTICA 2 - MICRO - GRUPO 2213
; PAREJA 10
; NOMBRES:
; DANIEL TIJERINA GONZÁLES
; SUEMY INAGAKI PINHEIRO FAGUNDES
;**************************************************************************

;**************************************************************************
; SBM 2020. ESTRUCTURA BÁSICA DE UN PROGRAMA EN ENSAMBLADOR
;**************************************************************************
; DEFINICION DEL SEGMENTO DE DATOS
DATOS SEGMENT


	EXTRN fopen:FAR
	EXTRN Write_WAV:FAR
	EXTRN fclose:FAR
	EXTRN Init_WAV_Header:FAR
	
	TABLA DB 8000 DUP (?)
	TAMANO DW 4 ;TAMANO DE LA PALABRA QUIT
	RESULTADO DB 0
	PARA DB "quit", 10D, 13D, '$'

	BUFFER DB 255            ;NUMERO MAXIMO DE ELEMENTOS A SEREN LEIDOS
		   DB ?              ;NUMERO DE ELEMENTOS LIDOS RETORNADO PELA INTERRUPÇÃO SEM INCLUIR ENTER
	STRING DB 255 DUP (0)    ;VARIABLE ALMECENANDO EL NOMBRE DEL FICHERO LEIDO 
	

	BUFFER2 DB 5             ;NUMERO MAXIMO DE ELEMENTOS A SEREN LEIDOS
    	     DB ?            ;NUMERO DE ELEMENTOS LIDOS RETORNADO PELA INTERRUPÇÃO SEM INCLUIR ENTER
	NUMERO DB 5 DUP (0)      ;VARIABLE ALMACENANDO LA FRECUENCIA LEIDA

	TERMINADOR DB 10D, 13D, '$'

	; DECLARACION DE MENSAGES
	FIN_DEL_PROGRAMA DB "PROGRAMA FINALIZADO CON PALABRA QUIT", 10D, 13D, '$'
	MENSAGE_ERROR_NOTA DB "NO EXISTE NOTA CON ESA FRECUENCIA, INTENTE OTRA VEZ", 10D, 13D, '$'
	MENSAGE DB "EXCRIBA EL NOMBRE DEL FICHERO INCLUINDO LA EXTENSION", 10D, 13D, '$'
	MENSAGE2 DB  "ESCRIBA LA FRECUENCIA (SOLAMENTE NUMEROS)", 10D, 13D, '$'

	;FRECUENCIAS EN FORMATO STRING PARA COMPARAR CON LA FRECUENCIA RECIBIDA
	DO   DB "262", 10D, 13D, '$'  ;31 SAMPLES
	RE   DB "294", 10D, 13D, '$'  ;27 SAMPLES
	MI   DB "330", 10D, 13D, '$'  ;24 SAMPLES
	FA   DB "349", 10D, 13D, '$'  ;23 SAMPLES
	SOL  DB "392", 10D, 13D, '$'  ;20 SAMPLES
	LA   DB "440", 10D, 13D, '$'  ;18 SAMPLES
	SII  DB "494", 10D, 13D, '$'  ;16 SAMPLES
	DO2  DB "523", 10D, 13D, '$'  ;15 SAMPLES

	; NUMERO DE SAMPLES/2 NECESARIAS PARA CADA NOTA
	SP_DO  DW 15
	SP_RE  DW 14
	SP_MI  DW 12
	SP_FA  DW 11
	SP_SOL DW 10
	SP_LA  DW 9
	SP_SI  DW 8
	SP_DO2 DW 7

	NUM_SP DW  0 ;NUMERO DE SAMPLES A PASAR DE ACUERDO CON LA FRECUENCIA RECIBIDA

	TAM_NOTA DW 3 ; TAMANO MAXIMO DE LA FRECUENCIA RECIBIDA


DATOS ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO DE PILA
PILA SEGMENT STACK "STACK"
	DB 40H DUP (0) ;ejemplo de inicialización, 64 bytes inicializados a 0
PILA ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO EXTRA
EXTRA SEGMENT
	RESULT DW 0,0 ;ejemplo de inicialización. 2 PALABRAS (4 BYTES)
EXTRA ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO DE CODIGO
CODE SEGMENT
ASSUME CS: CODE, DS: DATOS, ES: EXTRA, SS: PILA
; COMIENZO DEL PROCEDIMIENTO PRINCIPAL

INICIO PROC NEAR
	; INICIALIZA LOS REGISTROS DE SEGMENTO CON SU VALOR
	MOV AX, DATOS
	MOV DS, AX
	MOV AX, PILA
	MOV SS, AX
	MOV AX, EXTRA
	MOV ES, AX
	MOV SP, 64 ; CARGA EL PUNTERO DE PILA CON EL VALOR MAS ALTO
	; FIN DE LAS INICIALIZACIONES

COMIENZO:	

	;IMPRIME MENSAGE - SOLICITA NOMBRE DEL FICHERO
	MOV DX, OFFSET MENSAGE
	MOV AH, 09H
	INT 21H

	;LE LA ENTRADA EN EL BUFFER
	MOV DX, OFFSET BUFFER
	MOV AH, 0AH
	INT 21H

	; SUBSTITUI ENTER CHR(13) POR TERMINO DE STRING

	MOV SI, OFFSET BUFFER + 1 ; CARGA EN SI EL NUMERO DE ELEMENTOS LEIDOS
	MOV CL, [SI]              ; ALMACENA EN CL EL NUMERO DE ELMENTOS LEIDOS
	MOV CH, 0                 ; ZERA CH PARA PODER UTILIZAR EL CX
	INC CX                    ; CX PASA A ALMACENAR LA POSICION DEL ENTER CHR(13) FINAL DEL BUFFER
	ADD SI, CX                ; SI APONTA PARA LA POSICION
	MOV AL, '$'
	MOV [SI], AL              ;SUBSTITUI O ENTER CHR(13) PELO TERMINADOR DE STRING '$'

	; INICIALIZA EL PROCESO DE COMPARACION DEL NOMBRE CON QUIT

	MOV SI, 0 ;SI ES EL INDICE PARA LA COMPARACION
	JMP QUIT

; LOOP PARA VERIFICAR SE A PALAVRA RECEBIDA É A QUIT
QUIT:
	MOV AL, STRING[SI]
	CMP AL, PARA[SI]
	JNZ CONTINUA                       ;NAO É A PALAVRA QUIT, PODE CONTINUAR
	INC SI
	CMP SI, TAMANO
	JNZ QUIT
	MOV RESULTADO, 1 				   ;AS STRINGS SAO IGUAIS
	JMP SAIR                         


SAIR:
	MOV DX, OFFSET FIN_DEL_PROGRAMA ; PROGRAMA FINALIZADO CON LA PALABRA QUIT
	MOV AH, 09H
	INT 21H     
	JMP FIM


; CASO LA PALABRA LEÍDA NO SEA QUIT

CONTINUA:
	;IMPRIME MENSAGE2 - SOLICITA FRECUENCIA
	
	MOV DX, OFFSET MENSAGE2
	MOV AH, 09H
	INT 21H

	;LE A ENTRADA NO BUFFER2 - FREQUENCIA
	MOV DX, OFFSET BUFFER2
	MOV AH, 0AH
	INT 21H

	; SUBSTITUI ENTER CHR(13) POR TERMINO DE STRING

	MOV SI, OFFSET BUFFER2 + 1 ; CARREGA EN SI O NUMERO DE ELEMENTOS LIDOS
	MOV CL, [SI]              ; ARMAZENA EM CL O NUMERO DE ELMENTOS LIDOS
	MOV CH, 0                 ; ZERA CH PARA PODER USAR O CX
	INC CX                    ; CX PASSA A ARMAZENAR A POSICAO DO ENTER CHR(13) FINAL DO BUFFER
	ADD SI, CX                ; SI APONYA PARA A POSICAO
	MOV AL, '$'
	MOV [SI], AL              ;SUBSTITUI O ENTER CHR(13) PELO TERMINADOR DE STRING '$'


	MOV SI, 0
ANA_DO:
	MOV AL, DO[SI]
	CMP AL, NUMERO[SI]
	JNZ ANA_RE                       ;NAO É A NOTA DO, TESTA A RE
	INC SI
	CMP SI, TAM_NOTA
	JNZ ANA_DO
	JMP NOTA_DO
ANA_RE:
	MOV SI, 0
ANA_RE_2:
	MOV AL, RE[SI]
	CMP AL, NUMERO[SI]
	JNZ ANA_MI                       ;NAO É A NOTA RE, TESTA A MI
	INC SI
	CMP SI, TAM_NOTA
	JNZ ANA_RE_2
	JMP NOTA_RE
ANA_MI:
	MOV SI, 0
ANA_MI_2:
	MOV AL, MI[SI]
	CMP AL, NUMERO[SI]
	JNZ ANA_FA                       ;NAO É A NOTA MI, TESTA A FA
	INC SI
	CMP SI, TAM_NOTA
	JNZ ANA_MI_2
	JMP NOTA_MI
ANA_FA:
	MOV SI, 0
ANA_FA_2:
	MOV AL, FA[SI]
	CMP AL, NUMERO[SI]
	JNZ ANA_SOL                       ;NAO É A NOTA FA, TESTA A SOL
	INC SI
	CMP SI, TAM_NOTA
	JNZ ANA_FA_2
	JMP NOTA_FA
ANA_SOL:
	MOV SI, 0
ANA_SOL_2:
	MOV AL, SOL[SI]
	CMP AL, NUMERO[SI]
	JNZ ANA_LA                       ;NAO É A NOTA SOL, TESTA A LA
	INC SI
	CMP SI, TAM_NOTA
	JNZ ANA_SOL_2
	JMP NOTA_SOL
ANA_LA:
	MOV SI, 0
ANA_LA_2:
	MOV AL, LA[SI]
	CMP AL, NUMERO[SI]
	JNZ ANA_SI                       ;NAO É A NOTA LA, TESTA A SI
	INC SI
	CMP SI, TAM_NOTA
	JNZ ANA_LA_2
	JMP NOTA_LA

ANA_SI:
	MOV SI, 0
ANA_SI_2:
	MOV AL, SII[SI]
	CMP AL, NUMERO[SI]
	JNZ ANA_DO2                       ;NAO É A NOTA SI, TESTA A DO2
	INC SI
	CMP SI, TAM_NOTA
	JNZ ANA_SI_2
	JMP NOTA_SI

ANA_DO2:
	MOV SI, 0
ANA_DO2_2:
	MOV AL, DO2[SI]
	CMP AL, NUMERO[SI]
	JNZ ERROR_NOTA                       ;NAO É A NOTA DO2, A FRECUENCIA ESTA ERRADA
	INC SI
	CMP SI, TAM_NOTA
	JNZ ANA_DO2_2
	JMP NOTA_DO2

ERROR_NOTA:
    MOV DX, OFFSET MENSAGE_ERROR_NOTA
    MOV AH, 09H
    INT 21H   
    MOV DX, OFFSET NUMERO
    MOV AH, 09H
    INT 21H
    JMP COMIENZO                      

NOTA_DO: 
	MOV AX, SP_DO      ;NUMERO DE SAMPLES PARA LA NOTA DO
	MOV NUM_SP, AX
	JMP TABL
NOTA_RE:
	MOV AX, SP_RE      ;NUMERO DE SAMPLES PARA LA NOTA RE
	MOV NUM_SP, AX
	JMP TABL
NOTA_MI: 
	MOV AX, SP_MI      ;NUMERO DE SAMPLES PARA LA NOTA MI
	MOV NUM_SP, AX
	JMP TABL
NOTA_FA:
	MOV AX, SP_FA      ;NUMERO DE SAMPLES PARA LA NOTA FA
	MOV NUM_SP, AX
	JMP TABL
NOTA_SOL:
	MOV AX, SP_SOL     ;NUMERO DE SAMPLES PARA LA NOTA SOL
	MOV NUM_SP, AX
	JMP TABL
NOTA_LA: 
	MOV AX, SP_LA      ;NUMERO DE SAMPLES PARA LA NOTA LA
	MOV NUM_SP, AX
	JMP TABL
NOTA_SI:
	MOV AX, SP_SI      ;NUMERO DE SAMPLES PARA LA NOTA SI
	MOV NUM_SP, AX
	JMP TABL
NOTA_DO2:
	MOV AX, SP_DO2     ;NUMERO DE SAMPLES PARA LA NOTA DO2
	MOV NUM_SP, AX

TABL:    
	MOV SI, 0 ;INDICE DE LA TABLA
	MOV CX, 8000 ;CONTADOR DEL BUCLE
	XOR DX, DX ;SE INICIALIZA DX A 0 PARA USARSE EN DIVISION


POSI:
	; SE VERIFICA QUE NO SE PASE DEL TAMAÑO DE LA TABLA
	CMP CX, 0
	JE DISTINTO
	DEC CX

	; SE AGREGA UN VALOR A LA TABLA
	MOV TABLA[SI], 50
	INC SI

	; SE HACE LA FLUCTUACIÓN SEGÚN EL ÍNDICE DE LA TABLA
	XOR DX, DX
	MOV AX, SI
	MOV BX, NUM_SP
	DIV BX
	CMP DX, 0
	JE NEGA
	JMP POSI
NEGA:
	; SE VERIFICA QUE NO SE PASE DEL TAMAÑO DE LA TABLA
	CMP CX, 0
	JE DISTINTO
	DEC CX

	; SE AGREGA UN VALOR A LA TABLA
	MOV TABLA[SI], -50
	INC SI

	; SE HACE LA FLUCTUACIÓN SEGÚN EL ÍNDICE DE LA TABLA
	   XOR DX, DX
	MOV AX, SI
	MOV BX, NUM_SP
	DIV BX
	CMP DX, 0
	JE POSI
	JMP NEGA


DISTINTO:
	; ACABAMOS
	MOV DX, OFFSET STRING
	CALL fopen
	MOV BX, AX
	MOV DX, 8000
	MOV CX, 8000
	CALL Init_WAV_Header
	MOV DI, OFFSET TABLA
	CALL Write_WAV
	CALL fclose
	JMP COMIENZO

FIM:
	; FIN DEL PROGRAMA
	MOV AX, 4C00H
	INT 21H


INICIO ENDP

; FIN DEL SEGMENTO DE CODIGO
CODE ENDS
; FIN DEL PROGRAMA INDICANDO DONDE COMIENZA LA EJECUCION
END INICIO 